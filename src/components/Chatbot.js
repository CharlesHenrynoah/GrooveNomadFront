import React, { useState, useRef, useEffect } from 'react';
import { Link, useLocation } from 'react-router-dom';
import { FaPaperPlane, FaRobot, FaUser, FaArrowLeft } from 'react-icons/fa';
import { useAuth } from '../context/AuthContext';
import airtableService from '../services/airtableService';
import FestivalCard from './FestivalCard';
import './Chatbot.css';

const Chatbot = () => {
  const { user } = useAuth();
  const location = useLocation();
  const [messages, setMessages] = useState([
    {
      id: 1,
      text: "Salut je suis GrooveBot votre assistant de recherches d'√©v√©nement musical ! Que souhaitez vous savoir !",
      sender: 'bot',
      timestamp: new Date(),
      festivals: null
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [festivalsData, setFestivalsData] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const [chatContext, setChatContext] = useState({
    userPreferences: {},
    conversationHistory: [],
    lastFilters: {}
  });
  const messagesEndRef = useRef(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // Charger les donn√©es Airtable au d√©marrage
  useEffect(() => {
    const loadFestivalsData = async () => {
      try {
        setIsLoading(true);
        const data = await airtableService.getFestivalsFromAirtable();
        setFestivalsData(data);
        console.log('üìä Donn√©es festivals charg√©es pour le chatbot:', data.length, 'festivals');
        
        // Ajouter un message une fois les donn√©es charg√©es SEULEMENT s'il n'y a pas de message initial
        if (data.length > 0 && !location.state?.initialMessage) {
          const dataLoadedMessage = {
            id: Date.now(),
            text: `üéâ Parfait ! J'ai charg√© ${data.length} festivals dans ma base de donn√©es. Je peux maintenant vous aider √† trouver des informations pr√©cises !`,
            sender: 'bot',
            timestamp: new Date(),
            festivals: null
          };
          setMessages(prev => [...prev, dataLoadedMessage]);
        }
      } catch (error) {
        console.error('‚ùå Erreur lors du chargement des donn√©es pour le chatbot:', error);
        const errorMessage = {
          id: Date.now(),
          text: "‚ö†Ô∏è Je rencontre des difficult√©s pour charger les donn√©es des festivals. Vous pouvez quand m√™me me poser des questions g√©n√©rales !",
          sender: 'bot',
          timestamp: new Date(),
          festivals: null
        };
        setMessages(prev => [...prev, errorMessage]);
      } finally {
        setIsLoading(false);
      }
    };

    loadFestivalsData();
  }, [location.state]);

  // G√©rer le message initial depuis la page d'accueil
  useEffect(() => {
    if (location.state?.initialMessage && festivalsData.length > 0) {
      const initialMessage = location.state.initialMessage;
      console.log('üì© Message initial re√ßu depuis la page d\'accueil:', initialMessage);
      
      // Ajouter le message de chargement des donn√©es d'abord
      const dataLoadedMessage = {
        id: Date.now(),
        text: `üéâ Parfait ! J'ai charg√© ${festivalsData.length} festivals dans ma base de donn√©es. Je peux maintenant vous aider √† trouver des informations pr√©cises !`,
        sender: 'bot',
        timestamp: new Date(),
        festivals: null
      };
      
      // Ajouter le message de l'utilisateur
      const userMessage = {
        id: Date.now() + 1,
        text: initialMessage,
        sender: 'user',
        timestamp: new Date()
      };
      
      setMessages(prev => [...prev, dataLoadedMessage, userMessage]);
      setIsTyping(true);
      
      // Traiter le message automatiquement
      setTimeout(async () => {
        try {
          const botResponse = await getBotResponse(initialMessage);
          
          const typingDuration = Math.min(Math.max(botResponse.text.length * 20, 1500), 4000);
          
          setTimeout(() => {
            const botMessage = {
              id: Date.now() + 1,
              text: botResponse.text,
              sender: 'bot',
              timestamp: new Date(),
              festivals: botResponse.festivals
            };
            
            setMessages(prev => [...prev, botMessage]);
            setIsTyping(false);
          }, typingDuration);
          
        } catch (error) {
          console.error('‚ùå Erreur lors du traitement du message initial:', error);
          
          setTimeout(() => {
            const errorMessage = {
              id: Date.now() + 1,
              text: "D√©sol√©, je rencontre des difficult√©s techniques. Pouvez-vous r√©essayer votre question ? ü§ñ",
              sender: 'bot',
              timestamp: new Date(),
              festivals: null
            };
            
            setMessages(prev => [...prev, errorMessage]);
            setIsTyping(false);
          }, 1500);
        }
      }, 500);
      
      // Nettoyer le state pour √©viter de retraiter le message
      window.history.replaceState({}, document.title);
    }
  }, [location.state, festivalsData]);

  // V√©rifier si la question est sur un sujet musical autoris√©
  const isMusicalTopic = (message) => {
    const lowerMessage = message.toLowerCase();
    
    // Si c'est une conversation continue (questions courtes), accepter plus facilement
    const conversationContinuers = [
      'donne les moi', 'donne moi', 'montre les moi', 'montre moi', 'affiche les',
      'liste les', 'pr√©sente les', 'dis moi', 'raconte moi', 'explique moi',
      'oui', 'non', 'ok', 'merci', 'parfait', 'g√©nial', 'cool', 'super',
      'et', 'aussi', 'encore', 'plus', 'autre', 'autres', 'diff√©rent',
      'lesquels', 'lesquelles', 'combien', 'comment', 'pourquoi', 'quand', 'o√π',
      'peux tu', 'peux-tu', 'pourrais tu', 'pourrais-tu', 'aurais tu', 'aurais-tu'
    ];
    
    // V√©rifier si c'est une continuation de conversation
    const isContinuation = conversationContinuers.some(continuer => 
      lowerMessage.includes(continuer) || lowerMessage === continuer
    );
    
    // Si c'est une continuation ET qu'on a d√©j√† parl√© de festivals, accepter
    if (isContinuation && chatContext.conversationHistory.length > 0) {
      const hasRecentFestivalContext = chatContext.conversationHistory.slice(-3).some(entry => 
        entry.message && (
          entry.message.toLowerCase().includes('festival') ||
          entry.message.toLowerCase().includes('house') ||
          entry.message.toLowerCase().includes('techno') ||
          entry.message.toLowerCase().includes('concert') ||
          entry.message.toLowerCase().includes('musique') ||
          entry.extractedInfo?.genre
        )
      );
      
      if (hasRecentFestivalContext) {
        return true;
      }
    }
    
    // Mots-cl√©s musicaux directs
    const musicalKeywords = [
      'festival', 'concert', 'artiste', 'musicien', 'dj', 'musique', 'electronic', '√©lectro',
      'techno', 'house', 'trance', 'dubstep', 'rock', 'pop', 'jazz', 'hip-hop', 'rap',
      'lineup', 'sc√®ne', 'scene', '√©v√©nement', '√©v√®nement', 'event', 'show', 'spectacle',
      'billet', 'ticket', 'prix', 'tarif', 'lieu', 'ville', 'pays', 'date', 'quand',
      'qui joue', 'qui chante', 'programmation', 'genre', 'style', 'sound', 'beat',
      'venue', 'stage', 'performance', 'live', 'set', 'mix', 'remix', 'album',
      'track', 'song', 'chanson', 'morceau', 'drop', 'bass', 'synth', 'vocal',
      'rave', 'club', 'boite', 'discoth√®que', 'dance', 'danse', 'beat', 'tempo',
      'ambiance', 'atmosphere', 'vibe', 'mood', '√©nergie', 'energy'
    ];
    
    // Artistes musicaux connus (DJ, producteurs, artistes √©lectroniques, etc.)
    const knownArtists = [
      'david guetta', 'martin garrix', 'armin van buuren', 'ti√´sto', 'calvin harris',
      'deadmau5', 'skrillex', 'diplo', 'avicii', 'swedish house mafia', 'above & beyond',
      'hardwell', 'afrojack', 'steve aoki', 'zedd', 'axwell', 'ingrosso', 'angello',
      'daft punk', 'justice', 'moderat', 'caribou', 'disclosure', 'flume', 'odesza',
      'porter robinson', 'madeon', 'rezz', 'fisher', 'chris lake', 'claude vonstroke',
      'adam beyer', 'charlotte de witte', 'amelie lens', 'boris brejcha', 'artbat',
      'tale of us', 'maceo plex', 'dixon', 'solomun', 'ben b√∂hmer', 'nora en pure',
      'paul kalkbrenner', 'nina kraviz', 'peggy gou', 'patrick topping', 'camelphat',
      'fisher', 'john summit', 'vintage culture', 'meduza', 'fred again', 'four tet',
      'bicep', 'floating points', 'jamie xx', 'bonobo', 'tycho', 'emancipator',
      'pretty lights', 'griz', 'bassnectar', 'illenium', 'seven lions', 'said the sky',
      'marshmello', 'the chainsmokers', 'alan walker', 'kygo', 'don diablo',
      'oliver heldens', 'tchami', 'malaa', 'ac slater', 'destructo', 'brohug',
      'martin solveig', 'bob sinclar', 'cassius', 'modjo', 'stardust', 'mr. oizo',
      'cassius', 'superfunk', 'alex gopher', '√©tienne de cr√©cy', 'kavinsky'
    ];
    
    // Contextes li√©s aux festivals (m√™me sans mots-cl√©s directs)
    const festivalContexts = [
      'budget', 'pas cher', '√©conomique', 'abordable', 'gratuit', 'free',
      'recommande', 'conseil', 'suggestion', 'propose', 'trouve', 'cherche',
      '√©t√©', 'hiver', 'printemps', 'automne', 'juillet', 'ao√ªt', 'juin',
      'weekend', 'vacances', 'sortie', 'sortir', 'aller', 'voir',
      'proche', 'pr√®s', 'loin', 'distance', 'transport', 'h√©bergement',
      'camping', 'hotel', 'logement', 'dormir', 'rester',
      'amis', 'groupe', 'solo', 'famille', 'couple', 'entre potes',
      'premi√®re fois', 'd√©butant', 'exp√©rience', 'd√©couvrir',
      'meilleur', 'top', 'excellent', 'incroyable', 'g√©nial', 'cool',
      'atmosph√®re', 'ambiance', '√©nergie', 'foule', 'public', 'crowd',
      'nourriture', 'boisson', 'restauration', 'bar', 'food truck',
      's√©curit√©', 'famille', 'enfant', 'age', 'restriction'
    ];
    
    // Patterns de questions contextuelles
    const contextualPatterns = [
      /j'ai un budget de \d+/,
      /budget maximum \d+/,
      /pas plus de \d+/,
      /moins de \d+ euro/,
      /trouve[z]? moi/,
      /recommande[z]? moi/,
      /conseil[le]?[z]? moi/,
      /qu'est-ce que tu/,
      /que me propose[z]?/,
      /j'aimerais aller/,
      /je veux voir/,
      /je cherche/,
      /o√π puis-je/,
      /comment faire pour/,
      /c'est quoi/,
      /parle[z]? moi de/,
      /infos? sur/,
      /d√©tails? sur/
    ];
    
    // V√©rifier les mots-cl√©s directs
    const hasMusicalKeywords = musicalKeywords.some(keyword => lowerMessage.includes(keyword));
    
    // V√©rifier le contexte festival
    const hasFestivalContext = festivalContexts.some(context => lowerMessage.includes(context));
    
    // V√©rifier les patterns contextuels
    const hasContextualPattern = contextualPatterns.some(pattern => pattern.test(lowerMessage));
    
    // V√©rifier si un artiste musical connu est mentionn√©
    const hasKnownArtist = knownArtists.some(artist => lowerMessage.includes(artist));
    
    // Questions g√©n√©rales sur les artistes/musique
    const generalMusicQuestions = [
      /qui est /,
      /c'est qui /,
      /connaissez.vous /,
      /connais.tu /,
      /parlez.moi de /,
      /parle.moi de /,
      /que penses.tu de /,
      /que pensez.vous de /,
      /infos sur /,
      /informations sur /
    ];
    
    const hasGeneralMusicQuestion = generalMusicQuestions.some(pattern => pattern.test(lowerMessage));
    
    // Dans un contexte de bot festival, si c'est une question contextuelle, on l'accepte
    if (hasContextualPattern && (hasFestivalContext || hasMusicalKeywords || hasKnownArtist)) {
      return true;
    }
    
    // Accepter si c'est une question g√©n√©rale sur un artiste connu
    if (hasGeneralMusicQuestion && hasKnownArtist) {
      return true;
    }
    
    // Accepter si on a des mots-cl√©s musicaux, du contexte festival, ou un artiste connu
    return hasMusicalKeywords || hasFestivalContext || hasKnownArtist;
  };

  // AGENT 1: Agent Crit√®res - Analyse les crit√®res de recherche
  const agentCriteres = (userMessage) => {
    const lowerMessage = userMessage.toLowerCase();
    let newPreferences = {...chatContext.userPreferences};
    let newFilters = {...chatContext.lastFilters};
    
    console.log('üéØ AGENT CRIT√àRES activ√©:', userMessage);
    
    const criteres = {
      budget: null,
      lieu: null,
      genre: null,
      artiste: null,
      atmosphere: null,
      capacite: null,
      duree: null,
      hebergement: null,
      periode: null,
      experience: null,
      confidence: 0
    };
    
    // Analyser le budget avec patterns avanc√©s
    const budgetPatterns = [
      /budget[^0-9]*(\d+)/i,
      /(\d+)[^0-9]*euro/i,
      /moins de[^0-9]*(\d+)/i,
      /pas plus de[^0-9]*(\d+)/i,
      /maximum[^0-9]*(\d+)/i,
      /max[^0-9]*(\d+)/i,
      /jusqu'√†[^0-9]*(\d+)/i,
      /(\d+)[^0-9]*‚Ç¨/i
    ];
    
    for (const pattern of budgetPatterns) {
      const match = lowerMessage.match(pattern);
      if (match) {
        criteres.budget = parseInt(match[1]);
        newPreferences.budget = criteres.budget;
        newFilters.budget = criteres.budget;
        criteres.confidence += 20;
        console.log('üí∞ Budget d√©tect√©:', criteres.budget);
        break;
      }
    }
    
    // D√©tecter la suppression du budget
    if (lowerMessage.includes('pas forcement') || lowerMessage.includes('n\'importe quel prix') || 
        lowerMessage.includes('sans limite') || lowerMessage.includes('peu importe le prix')) {
      delete newPreferences.budget;
      delete newFilters.budget;
      criteres.budget = null;
      console.log('üí∏ Budget supprim√© (pas de limite)');
    }
    
    // Analyser le lieu avec mapping √©tendu
    const lieuMappings = {
      'allemagne': 'Germany',
      'germany': 'Germany',
      'deutschland': 'Germany',
      'france': 'France',
      'belgique': 'Belgium',
      'belgium': 'Belgium',
      'pays-bas': 'Netherlands',
      'netherlands': 'Netherlands',
      'hollande': 'Netherlands',
      'espagne': 'Spain',
      'spain': 'Spain',
      'italie': 'Italy',
      'italy': 'Italy',
      'portugal': 'Portugal',
      'canada': 'Canada',
      'usa': 'USA',
      '√©tats-unis': 'USA',
      'etats-unis': 'USA',
      'united states': 'USA',
      'royaume-uni': 'UK',
      'uk': 'UK',
      'angleterre': 'UK',
      'suisse': 'Switzerland',
      'switzerland': 'Switzerland',
      'australie': 'Australia',
      'australia': 'Australia',
      'croatie': 'Croatia',
      'croatia': 'Croatia',
      'hongrie': 'Hungary',
      'hungary': 'Hungary',
      'serbie': 'Serbia',
      'serbia': 'Serbia',
      'vietnam': 'Vietnam',
      'thailande': 'Thailand',
      'thailand': 'Thailand',
      'inde': 'India',
      'india': 'India',
      'islande': 'Iceland',
      'iceland': 'Iceland'
    };
    
    for (const [key, value] of Object.entries(lieuMappings)) {
      if (lowerMessage.includes(key)) {
        criteres.lieu = value;
        newPreferences.lieu = value;
        newFilters.lieu = value;
        criteres.confidence += 25;
        console.log('üåç Lieu d√©tect√©:', value);
        break;
      }
    }
    
    // Analyser le genre avec mapping √©tendu
    const genreMappings = {
      'house': 'House',
      'techno': 'Techno',
      'trance': 'Trance',
      'hardstyle': 'Hardstyle',
      'edm': 'EDM',
      'psytrance': 'Psytrance',
      'drum and bass': 'Drum',
      'dubstep': 'Dubstep',
      'electronic': 'Electronic',
      '√©lectro': 'Electronic',
      'progressive': 'Progressive',
      'minimal': 'Minimal',
      'deep house': 'House',
      'tech house': 'House',
      'tribal': 'Tribal',
      'ambient': 'Ambient',
      'breakbeat': 'Breakbeat'
    };
    
    for (const [key, value] of Object.entries(genreMappings)) {
      if (lowerMessage.includes(key)) {
        criteres.genre = value;
        newPreferences.genre = value;
        newFilters.genre = value;
        criteres.confidence += 20;
        console.log('üéµ Genre d√©tect√©:', value);
        break;
      }
    }
    
    // Analyser l'artiste
    const artistPatterns = [
      /qui joue/,
      /lineup/,
      /programmation/,
      /artiste/,
      /dj/
    ];
    
    if (artistPatterns.some(pattern => pattern.test(lowerMessage))) {
      criteres.artiste = lowerMessage;
      criteres.confidence += 15;
      console.log('üé§ Recherche d\'artiste d√©tect√©e');
    }
    
    // Analyser l'atmosph√®re
    const atmosphereKeywords = {
      'intime': 'One-stage intimate',
      'intimate': 'One-stage intimate',
      'familial': 'Family-friendly',
      'underground': 'Underground',
      'commercial': 'Commercial',
      'desert': 'Desert gathering',
      'd√©sert': 'Desert gathering',
      'for√™t': 'Forest rave',
      'forest': 'Forest rave',
      'plage': 'Beach',
      'beach': 'Beach',
      'multi-scene': 'Multi-stage',
      'multi-sc√®ne': 'Multi-stage'
    };
    
    for (const [key, value] of Object.entries(atmosphereKeywords)) {
      if (lowerMessage.includes(key)) {
        criteres.atmosphere = value;
        criteres.confidence += 12;
        console.log('üåü Atmosph√®re d√©tect√©e:', value);
        break;
      }
    }
    
    // Analyser la capacit√©
    const capacityPatterns = [
      /petit[^0-9]*(\d+)/i,
      /grand[^0-9]*(\d+)/i,
      /(\d+)[^0-9]*personnes/i,
      /capacit√©[^0-9]*(\d+)/i
    ];
    
    for (const pattern of capacityPatterns) {
      const match = lowerMessage.match(pattern);
      if (match) {
        criteres.capacite = parseInt(match[1]);
        criteres.confidence += 10;
        console.log('üë• Capacit√© d√©tect√©e:', criteres.capacite);
        break;
      }
    }
    
    // Analyser l'h√©bergement
    const accommodationKeywords = {
      'camping': 'Camping',
      'hotel': 'Hotel',
      'h√¥tel': 'Hotel',
      'glamping': 'Glamping',
      'bungalow': 'Bungalow',
      'airbnb': 'Airbnb',
      'auberge': 'Hostel',
      'hostel': 'Hostel'
    };
    
    for (const [key, value] of Object.entries(accommodationKeywords)) {
      if (lowerMessage.includes(key)) {
        criteres.hebergement = value;
        criteres.confidence += 8;
        console.log('üè® H√©bergement d√©tect√©:', value);
        break;
      }
    }
    
    // Analyser l'exp√©rience
    if (lowerMessage.includes('premi√®re fois') || lowerMessage.includes('d√©butant') || lowerMessage.includes('novice')) {
      criteres.experience = 'debutant';
      criteres.confidence += 5;
      console.log('üë∂ Exp√©rience: d√©butant');
    }
    
    // Analyser la p√©riode
    const periodes = ['√©t√©', 'hiver', 'printemps', 'automne', 'juillet', 'ao√ªt', 'juin', 'septembre'];
    const periodeMatch = periodes.find(periode => lowerMessage.includes(periode));
    if (periodeMatch) {
      criteres.periode = periodeMatch;
      newPreferences.periode = periodeMatch;
      newFilters.periode = periodeMatch;
      criteres.confidence += 10;
      console.log('üìÖ P√©riode d√©tect√©e:', periodeMatch);
    }
    
    // Mettre √† jour le contexte
    setChatContext(prev => ({
      ...prev,
      userPreferences: newPreferences,
      lastFilters: newFilters,
      conversationHistory: [...prev.conversationHistory, {
        message: userMessage,
        timestamp: new Date(),
        extractedInfo: { budget: newPreferences.budget, lieu: newPreferences.lieu, genre: newPreferences.genre }
      }].slice(-10)
    }));
    
    console.log('üéØ AGENT CRIT√àRES - R√©sultat:', { criteres, confidence: criteres.confidence });
    
    return { criteres, newPreferences, newFilters };
  };

  // AGENT 2: Agent Donn√©es - Recherche dans la base de donn√©es Airtable
  const agentDonnees = (query, criteres, contextFilters = {}) => {
    const searchTerm = query.toLowerCase();
    const results = [];

    console.log('üîç AGENT DONN√âES activ√©:', {
      query: searchTerm,
      criteres: criteres,
      filters: contextFilters,
      totalFestivals: festivalsData.length
    });

    // Utiliser les crit√®res d√©tect√©s par l'Agent Crit√®res
    const detectedCriteria = {
      country: criteres.lieu || contextFilters.lieu,
      genre: criteres.genre || contextFilters.genre,
      budget: criteres.budget || contextFilters.budget,
      artist: criteres.artiste,
      atmosphere: criteres.atmosphere,
      capacity: criteres.capacite,
      accommodation: criteres.hebergement,
      duration: criteres.duree,
      month: criteres.periode || contextFilters.periode
    };

    console.log('üîç AGENT DONN√âES - Crit√®res re√ßus:', detectedCriteria);

    // Filtrer les festivals selon TOUS les crit√®res d√©tect√©s ET les filtres contextuels
    festivalsData.forEach(festival => {
      let relevanceScore = 0;
      let matchedInfo = [];
      let passFilters = true;

      // FILTRE PAYS (priorit√© haute - exclusif)
      const targetCountry = detectedCriteria.country || contextFilters.lieu;
      if (targetCountry) {
        const festivalCountry = festival.pays;
        if (festivalCountry !== targetCountry) {
          passFilters = false;
          console.log(`‚ùå Festival ${festival.nom} exclu: pays ${festivalCountry} !== ${targetCountry}`);
        } else {
          relevanceScore += 25; // Score √©lev√© pour correspondance pays
          matchedInfo.push(`Pays: ${festivalCountry}`);
          console.log(`‚úÖ Festival ${festival.nom} inclus: pays ${festivalCountry}`);
        }
      }

      // FILTRE GENRE (priorit√© haute)
      const targetGenre = detectedCriteria.genre || contextFilters.genre;
      if (targetGenre && festival.genre) {
        if (festival.genre.toLowerCase().includes(targetGenre.toLowerCase())) {
          relevanceScore += 20;
          matchedInfo.push(`Genre: ${festival.genre}`);
          console.log(`üéµ Genre correspondant: ${festival.genre}`);
        } else {
          // P√©nalit√© pour genre non correspondant
          relevanceScore -= 10;
        }
      }

      // FILTRE BUDGET (priorit√© moyenne)
      const targetBudget = detectedCriteria.budget || contextFilters.budget;
      if (targetBudget && festival.prix && festival.prix.length > 0) {
        const validPrices = festival.prix.filter(p => p > 0);
        if (validPrices.length > 0) {
          const minPrice = Math.min(...validPrices);
          const maxPrice = Math.max(...validPrices);
          
          if (minPrice <= targetBudget) {
            relevanceScore += 15;
            matchedInfo.push(`Prix accessible: ${minPrice}‚Ç¨ <= ${targetBudget}‚Ç¨`);
            console.log(`üí∞ Prix accessible: ${minPrice}‚Ç¨ pour budget ${targetBudget}‚Ç¨`);
          } else {
            // P√©nalit√© pour prix trop √©lev√©
            relevanceScore -= 8;
            console.log(`üí∏ Prix trop √©lev√©: ${minPrice}‚Ç¨ > ${targetBudget}‚Ç¨`);
          }
        }
      }

      // FILTRE ARTISTE (recherche dans le lineup)
      if (detectedCriteria.artist && festival.lineup && festival.lineup.length > 0) {
        const artistFound = festival.lineup.some(artiste => 
          artiste.nom && artiste.nom.toLowerCase().includes(searchTerm)
        );
        if (artistFound) {
          relevanceScore += 18;
          matchedInfo.push(`Artiste trouv√© dans le lineup`);
          console.log(`üé§ Artiste trouv√© dans le lineup de ${festival.nom}`);
        }
      }

      // FILTRE ATMOSPH√àRE/AMBIANCE
      if (detectedCriteria.atmosphere && festival.typeEvenement) {
        if (festival.typeEvenement.toLowerCase().includes(detectedCriteria.atmosphere.toLowerCase())) {
          relevanceScore += 12;
          matchedInfo.push(`Atmosph√®re: ${festival.typeEvenement}`);
          console.log(`üåü Atmosph√®re correspondante: ${festival.typeEvenement}`);
        }
      }

      // FILTRE CAPACIT√â
      if (detectedCriteria.capacity && festival.capacite) {
        const festivalCapacity = parseInt(festival.capacite);
        if (festivalCapacity && festivalCapacity >= detectedCriteria.capacity) {
          relevanceScore += 8;
          matchedInfo.push(`Capacit√©: ${festivalCapacity} personnes`);
          console.log(`üë• Capacit√© suffisante: ${festivalCapacity} >= ${detectedCriteria.capacity}`);
        }
      }

      // FILTRE H√âBERGEMENT
      if (detectedCriteria.accommodation && festival.hebergement) {
        const accommodationMatch = festival.hebergement.some(h => 
          h.toLowerCase().includes(detectedCriteria.accommodation.toLowerCase())
        );
        if (accommodationMatch) {
          relevanceScore += 10;
          matchedInfo.push(`H√©bergement disponible: ${detectedCriteria.accommodation}`);
          console.log(`üè® H√©bergement correspondant trouv√©`);
        }
      }

      // FILTRE DUR√âE
      if (detectedCriteria.duration && festival.duree) {
        const festivalDuration = parseInt(festival.duree);
        if (festivalDuration && Math.abs(festivalDuration - detectedCriteria.duration) <= 1) {
          relevanceScore += 6;
          matchedInfo.push(`Dur√©e: ${festivalDuration} jours`);
          console.log(`‚è±Ô∏è Dur√©e correspondante: ${festivalDuration} jours`);
        }
      }

      // RECHERCHE TEXTUELLE AVANC√âE dans tous les champs
      if (!targetCountry && !targetGenre && !targetBudget && !detectedCriteria.artist) {
        // Recherche par nom de festival
        if (festival.nom?.toLowerCase().includes(searchTerm)) {
          relevanceScore += 15;
          matchedInfo.push(`Festival: ${festival.nom}`);
        }

        // Recherche par ville/pays
        if (festival.ville?.toLowerCase().includes(searchTerm) || 
            festival.pays?.toLowerCase().includes(searchTerm)) {
          relevanceScore += 12;
          matchedInfo.push(`Lieu: ${festival.ville}, ${festival.pays}`);
        }

        // Recherche par venue/lieu
        if (festival.lieu?.toLowerCase().includes(searchTerm)) {
          relevanceScore += 10;
          matchedInfo.push(`Venue: ${festival.lieu}`);
        }

        // Recherche par genre
        if (festival.genre?.toLowerCase().includes(searchTerm)) {
          relevanceScore += 10;
          matchedInfo.push(`Genre: ${festival.genre}`);
        }

        // Recherche dans la description
        if (festival.description?.toLowerCase().includes(searchTerm)) {
          relevanceScore += 8;
          matchedInfo.push(`Description contient le terme recherch√©`);
        }

        // Recherche dans les artistes du lineup
        if (festival.lineup && festival.lineup.length > 0) {
          const artistMatch = festival.lineup.some(artiste => 
            artiste.nom && artiste.nom.toLowerCase().includes(searchTerm)
          );
          if (artistMatch) {
            relevanceScore += 12;
            matchedInfo.push(`Artiste dans le lineup`);
          }
        }

        // Recherche par a√©roport le plus proche
        if (festival.aeroport?.toLowerCase().includes(searchTerm)) {
          relevanceScore += 5;
          matchedInfo.push(`A√©roport: ${festival.aeroport}`);
        }

        // Recherche par type d'√©v√©nement/atmosph√®re
        if (festival.typeEvenement?.toLowerCase().includes(searchTerm)) {
          relevanceScore += 8;
          matchedInfo.push(`Type: ${festival.typeEvenement}`);
        }
      }

      // Bonus pour les festivals avec des donn√©es compl√®tes
      let completenessBonus = 0;
      if (festival.description && festival.description.trim()) completenessBonus += 2;
      if (festival.lineup && festival.lineup.length > 0) completenessBonus += 3;
      if (festival.medias && festival.medias.length > 0) completenessBonus += 2;
      if (festival.prix && festival.prix.some(p => p > 0)) completenessBonus += 2;
      if (festival.hebergement && festival.hebergement.length > 0) completenessBonus += 2;

      relevanceScore += completenessBonus;

      // Ajouter le festival s'il passe les filtres OU a un score de pertinence suffisant
      if (passFilters && relevanceScore > 0) {
        results.push({
          festival,
          score: relevanceScore,
          matchedInfo,
          completenessBonus
        });
      }
    });

    // Trier par score de pertinence (d√©croissant)
    const sortedResults = results.sort((a, b) => b.score - a.score);
    
    console.log('üîç AGENT DONN√âES - R√©sultats:', {
      totalFound: sortedResults.length,
      criteria: detectedCriteria,
      topResults: sortedResults.slice(0, 5).map(r => ({
        name: r.festival.nom,
        country: r.festival.pays,
        genre: r.festival.genre,
        score: r.score,
        matched: r.matchedInfo,
        completeness: r.completenessBonus
      }))
    });

    return {
      results: sortedResults,
      criteria: detectedCriteria,
      totalFound: sortedResults.length,
      searchPerformed: true
    };
  };

  // AGENT 3: Agent Synth√®se - Combine les r√©sultats et g√©n√®re la synth√®se finale
  const agentSynthese = (criteres, donneesResults, userMessage) => {
    console.log('üß† AGENT SYNTH√àSE activ√©');
    
    const synthese = {
      criteresDetectes: criteres,
      nombreResultats: donneesResults.totalFound,
      resultatsFiltr√©s: donneesResults.results.slice(0, 3),
      scoreMoyenPertinence: 0,
      recommandationsPrincipales: [],
      informationsManquantes: [],
      contexteSuggestions: [],
      confidence: criteres.confidence || 0
    };
    
    // Calculer le score moyen de pertinence
    if (donneesResults.results.length > 0) {
      synthese.scoreMoyenPertinence = donneesResults.results.reduce((sum, r) => sum + r.score, 0) / donneesResults.results.length;
    }
    
    // G√©n√©rer les recommandations principales
    donneesResults.results.slice(0, 3).forEach((result, index) => {
      const festival = result.festival;
      const recommendation = {
        rang: index + 1,
        nom: festival.nom,
        pays: festival.pays,
        genre: festival.genre,
        score: result.score,
        raisonsRecommandation: result.matchedInfo,
        informationsCl√©s: []
      };
      
      // Ajouter les informations cl√©s disponibles
      if (festival.ville) recommendation.informationsCl√©s.push(`Ville: ${festival.ville}`);
      if (festival.capacite) recommendation.informationsCl√©s.push(`Capacit√©: ${festival.capacite} personnes`);
      if (festival.duree) recommendation.informationsCl√©s.push(`Dur√©e: ${festival.duree} jours`);
      if (festival.prix && festival.prix.some(p => p > 0)) {
        const validPrices = festival.prix.filter(p => p > 0);
        recommendation.informationsCl√©s.push(`Prix: ${Math.min(...validPrices)}‚Ç¨-${Math.max(...validPrices)}‚Ç¨`);
      }
      if (festival.lineup && festival.lineup.length > 0) {
        const artistes = festival.lineup.map(a => a.nom).filter(n => n).slice(0, 3);
        if (artistes.length > 0) recommendation.informationsCl√©s.push(`Artistes: ${artistes.join(', ')}`);
      }
      if (festival.aeroport) recommendation.informationsCl√©s.push(`A√©roport: ${festival.aeroport}`);
      if (festival.typeEvenement) recommendation.informationsCl√©s.push(`Atmosph√®re: ${festival.typeEvenement}`);
      
      synthese.recommandationsPrincipales.push(recommendation);
    });
    
    // Identifier les informations manquantes
    if (!criteres.lieu && !criteres.budget && !criteres.genre) {
      synthese.informationsManquantes.push("Crit√®res de recherche peu sp√©cifiques");
    }
    if (!criteres.budget) {
      synthese.informationsManquantes.push("Budget non sp√©cifi√©");
    }
    if (!criteres.lieu) {
      synthese.informationsManquantes.push("Lieu de pr√©f√©rence non sp√©cifi√©");
    }
    
    // G√©n√©rer des suggestions contextuelles
    if (synthese.nombreResultats === 0) {
      synthese.contexteSuggestions.push("Essayez d'√©largir vos crit√®res de recherche");
      synthese.contexteSuggestions.push("V√©rifiez l'orthographe des termes utilis√©s");
    } else if (synthese.nombreResultats > 10) {
      synthese.contexteSuggestions.push("Beaucoup de r√©sultats trouv√©s, vous pourriez affiner vos crit√®res");
    }
    
    // Suggestions bas√©es sur les crit√®res manquants
    if (criteres.lieu && !criteres.genre) {
      synthese.contexteSuggestions.push("Vous pourriez sp√©cifier un genre musical pour affiner");
    }
    if (criteres.genre && !criteres.lieu) {
      synthese.contexteSuggestions.push("Vous pourriez sp√©cifier un pays ou une r√©gion");
    }
    
    console.log('üß† AGENT SYNTH√àSE - R√©sultat:', synthese);
    
    return synthese;
  };

  // Syst√®me multi-agents avec synth√®se intelligente
  const generateGeminiResponse = async (userMessage) => {
    console.log('üöÄ SYST√àME MULTI-AGENTS activ√© pour:', userMessage);
    
    try {
      // Cl√© API Gemini
      const GEMINI_API_KEY = 'AIzaSyB_lBRH0ja-p9-8Xzvzv8RfTU6z5QHKRWs';
      
      if (!GEMINI_API_KEY) {
        throw new Error('Cl√© API Gemini manquante');
      }
      
      // √âTAPE 1: Agent Crit√®res - Analyser les crit√®res de recherche
      console.log('üéØ Activation de l\'Agent Crit√®res...');
      const { criteres, newPreferences, newFilters } = agentCriteres(userMessage);
      
      // √âTAPE 2: Agent Donn√©es - Rechercher dans la base de donn√©es
      console.log('üîç Activation de l\'Agent Donn√©es...');
      const donneesResults = agentDonnees(userMessage, criteres, newFilters);
      
      // √âTAPE 3: Agent Synth√®se - Combiner les r√©sultats
      console.log('üß† Activation de l\'Agent Synth√®se...');
      const synthese = agentSynthese(criteres, donneesResults, userMessage);
      
      // √âTAPE 4: Pr√©parer le contexte avec la synth√®se des 3 agents
      let contextData = "";
      
      contextData += "SYNTH√àSE DES AGENTS:\n";
      contextData += `- Crit√®res d√©tect√©s: ${JSON.stringify(synthese.criteresDetectes)}\n`;
      contextData += `- Confidence: ${synthese.confidence}/100\n`;
      contextData += `- R√©sultats trouv√©s: ${synthese.nombreResultats}\n`;
      contextData += `- Score moyen pertinence: ${synthese.scoreMoyenPertinence.toFixed(1)}\n`;
      
      if (synthese.nombreResultats > 0) {
        contextData += "\nRECOMMANDATIONS PRINCIPALES:\n";
        
        synthese.recommandationsPrincipales.forEach((recommendation, index) => {
          contextData += `${recommendation.rang}. ${recommendation.nom} (${recommendation.genre || 'Genre non sp√©cifi√©'})`;
          contextData += ` - ${recommendation.pays || 'Pays non sp√©cifi√©'}`;
          contextData += ` - Score: ${recommendation.score}`;
          contextData += ` - Raisons: ${recommendation.raisonsRecommandation.join(', ')}`;
          
          if (recommendation.informationsCl√©s.length > 0) {
            contextData += ` - Infos: ${recommendation.informationsCl√©s.join(', ')}`;
          }
          
          contextData += "\n";
        });
      } else {
        contextData += "\nAucun festival trouv√© avec ces crit√®res.\n";
        contextData += "FESTIVALS DISPONIBLES (√©chantillon):\n";
        festivalsData.slice(0, 3).forEach((festival, index) => {
          contextData += `${index + 1}. ${festival.nom} (${festival.genre || 'Musique'}) - ${festival.ville || 'Lieu non sp√©cifi√©'}, ${festival.pays || 'Pays non sp√©cifi√©'}`;
          if (festival.prix && festival.prix.some(p => p > 0)) {
            const validPrices = festival.prix.filter(p => p > 0);
            contextData += ` - Prix: ${Math.min(...validPrices)}‚Ç¨-${Math.max(...validPrices)}‚Ç¨`;
          }
          contextData += "\n";
        });
      }
      
      // Ajouter les informations manquantes et suggestions
      if (synthese.informationsManquantes.length > 0) {
        contextData += `\nINFORMATIONS MANQUANTES: ${synthese.informationsManquantes.join(', ')}\n`;
      }
      
      if (synthese.contexteSuggestions.length > 0) {
        contextData += `\nSUGGESTIONS: ${synthese.contexteSuggestions.join(', ')}\n`;
      }

      // Pr√©parer l'historique de conversation
      const conversationHistory = chatContext.conversationHistory.slice(-3)
        .filter(entry => entry.message && entry.message.trim())
        .map(entry => 
          `Message: "${entry.message}" - Infos extraites: ${JSON.stringify(entry.extractedInfo)}`
        ).join('\n') || "Pas d'historique de conversation";

      // Pr√©parer les pr√©f√©rences utilisateur
      const userPreferencesText = Object.keys(newPreferences).length > 0 
        ? `Pr√©f√©rences utilisateur: ${JSON.stringify(newPreferences)}` 
        : "Pas de pr√©f√©rences sp√©cifiques d√©tect√©es";
      
      // Construire le prompt pour Gemini avec syst√®me multi-agents
      const prompt = `Tu es GrooveBot, assistant sp√©cialis√© dans les festivals de musique avec un syst√®me multi-agents ultra-performant.

SYST√àME MULTI-AGENTS ACTIV√â:
Tu travailles avec 3 agents sp√©cialis√©s qui ont d√©j√† analys√© la demande:
1. üéØ AGENT CRIT√àRES: A analys√© et extrait tous les crit√®res de recherche
2. üîç AGENT DONN√âES: A recherch√© dans la base de donn√©es Airtable
3. üß† AGENT SYNTH√àSE: A combin√© les r√©sultats et g√©n√©r√© une synth√®se

IMPORTANT: Les agents ont d√©j√† fait le travail d'analyse et de recherche. Tu dois utiliser leur synth√®se pour donner une r√©ponse naturelle et conversationnelle.

INSTRUCTIONS:
- Utilise la synth√®se fournie pour r√©pondre de mani√®re personnalis√©e
- Explique POURQUOI ces festivals correspondent aux crit√®res d√©tect√©s
- Mentionne les informations cl√©s disponibles (prix, capacit√©, lineup, etc.)
- Sois enthousiaste et naturel, comme si tu connaissais personnellement ces festivals
- Ne montre JAMAIS le processus technique ou les scores
- Adapte ton ton selon le niveau de confidence de la d√©tection des crit√®res

M√âMOIRE CONTEXTUELLE:
${userPreferencesText}

HISTORIQUE DE CONVERSATION:
${conversationHistory}

DONN√âES DISPONIBLES:
${contextData}

R√àGLES IMPORTANTES ULTRA-PERFORMANTES:
- Utilise la m√©moire contextuelle des conversations pr√©c√©dentes
- R√©ponds UNIQUEMENT sur les festivals, musique, artistes, √©v√©nements musicaux
- Sois enthousiaste et conversationnel avec des emojis
- R√©ponds en fran√ßais
- Comprends le contexte m√™me sans mots-cl√©s musicaux directs
- Tu peux r√©pondre aux questions g√©n√©rales sur les artistes musicaux (biographie, style, collaborations, etc.)
- Relie toujours les artistes aux festivals o√π ils pourraient jouer
- UTILISE TOUTES LES DONN√âES DISPONIBLES: lineup, venue, capacit√©, h√©bergement, a√©roport, description, atmosph√®re, dur√©e, prix d√©taill√©s
- Explique POURQUOI un festival correspond aux crit√®res demand√©s
- Donne des informations pratiques et concr√®tes (transport, h√©bergement, prix, dur√©e, etc.)
- Utilise le score de pertinence pour justifier tes recommandations
- Mentionne les d√©tails sp√©cifiques qui font la diff√©rence entre les festivals

FORMATAGE OBLIGATOIRE:
- N'UTILISE JAMAIS d'ast√©risques (*) pour mettre en gras ou souligner
- N'UTILISE JAMAIS de markdown (**texte**, __texte__, ###, etc.)
- Pour les listes, utilise des tirets (-) ou des puces (‚Ä¢) uniquement
- √âcris en texte plain sans formatage sp√©cial
- Exemple correct: "Festival Tomorrowland en Belgique" (pas "**Festival Tomorrowland**")
- Exemple correct: "- Awakenings Festival" (pas "* **Awakenings Festival**")

TYPES DE QUESTIONS QUE TU DOIS TRAITER:
1. BUDGET: "j'ai un budget de 100‚Ç¨", "pas cher", "√©conomique", "gratuit"
2. RECHERCHE: "trouve-moi", "recommande", "conseil", "propose"
3. GENRE: "techno", "house", "√©lectro", "rock", "jazz", "trance"
4. LIEU: "en France", "√† Paris", "proche", "pr√®s de chez moi"
5. DATE: "en √©t√©", "juillet", "weekend", "vacances", "2024"
6. ARTISTE: "Martin Garrix", "qui joue", "lineup", "programmation"
7. QUESTIONS ARTISTES: "Qui est David Guetta?", "Parle-moi de Ti√´sto", "C'est qui Armin van Buuren?"
8. EXP√âRIENCE: "premi√®re fois", "d√©butant", "meilleur", "top"
9. PRATIQUE: "transport", "h√©bergement", "camping", "hotel"
10. AMBIANCE: "underground", "familial", "jeune", "crowd", "atmosph√®re"
11. INFOS: "c'est quoi", "parle-moi de", "d√©tails", "informations"

INSTRUCTIONS SP√âCIALES:
- Si l'utilisateur a dit "France" pr√©c√©demment, ne propose QUE des festivals en France
- Si l'utilisateur a donn√© un budget, respecte-le strictement
- Si l'utilisateur a pr√©cis√© un genre, reste focalis√© sur ce genre
- Utilise les informations des messages pr√©c√©dents pour affiner ta r√©ponse
- Quand tu recommandes des festivals, les cartes visuelles s'afficheront automatiquement
- Fait r√©f√©rence aux cartes qui vont appara√Ætre : "Voici les festivals que j'ai trouv√©s pour toi :" ou "Regarde ces festivals qui correspondent √† tes crit√®res :"

QUESTION ACTUELLE: "${userMessage}"

INSTRUCTIONS POUR LA CHA√éNE DE PENS√âE:
1. Commence par analyser PR√âCIS√âMENT ce que l'utilisateur demande
2. Identifie les crit√®res exacts (budget, dates, genre, lieu)
3. Filtre les festivals selon CES crit√®res sp√©cifiques
4. R√©ponds de mani√®re PR√âCISE et PERTINENTE √† la question pos√©e
5. √âvite les r√©ponses g√©n√©riques - sois sp√©cifique √† la demande

ATTENTION FORMATAGE:
- √âcris UNIQUEMENT en texte plain, sans aucun formatage
- Pas d'ast√©risques (*), pas de markdown (**), pas de soulignement
- Utilise des tirets (-) pour les listes si n√©cessaire
- Exemple: "Awakenings Festival en Belgique" (pas "**Awakenings Festival**")

Utilise cette cha√Æne de thought interne pour donner une r√©ponse pr√©cise et pertinente.`;

      console.log('üîë Cl√© API Gemini:', GEMINI_API_KEY ? 'Pr√©sente' : 'Manquante');
      console.log('üß† Contexte utilisateur analys√©:', newPreferences);
      console.log('üîç Filtres appliqu√©s:', newFilters);
      console.log('üìä R√©sultats trouv√©s:', synthese.nombreResultats, 'festivals');
      console.log('üìù Prompt envoy√© √† Gemini:', prompt.substring(0, 200) + '...');
      
      const requestBody = {
        contents: [
          {
            parts: [
              {
                text: prompt
              }
            ]
          }
        ]
      };

      console.log('üì§ Requ√™te envoy√©e √† Gemini:', JSON.stringify(requestBody, null, 2));

      const response = await fetch('https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-goog-api-key': GEMINI_API_KEY
        },
        body: JSON.stringify(requestBody)
      });

      console.log('üì• Statut de la r√©ponse Gemini:', response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå D√©tails de l\'erreur Gemini:', errorText);
        throw new Error(`Erreur API Gemini: ${response.status} - ${errorText}`);
      }

      const data = await response.json();
      
      if (data.candidates && data.candidates[0] && data.candidates[0].content) {
        // Utiliser la synth√®se pour retourner les meilleurs festivals
        let festivalsToReturn = null;
        
        if (synthese.nombreResultats > 0) {
          festivalsToReturn = synthese.resultatsFiltr√©s.map(r => r.festival);
        } else {
          // Si pas de r√©sultats sp√©cifiques, prendre les premiers festivals de la base
          festivalsToReturn = festivalsData.slice(0, 3);
        }
        
        console.log('üöÄ SYST√àME MULTI-AGENTS - R√©ponse g√©n√©r√©e avec succ√®s');
        console.log('üìä Festivals retourn√©s:', festivalsToReturn.map(f => f.nom));
        
        return {
          text: data.candidates[0].content.parts[0].text,
          festivals: festivalsToReturn,
          synthese: synthese // Ajouter la synth√®se pour debug
        };
      } else {
        throw new Error('R√©ponse invalide de Gemini');
      }
      
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'appel √† Gemini:', error);
      
      // Fallback avec le syst√®me multi-agents m√™me si Gemini ne fonctionne pas
      try {
        console.log('üîÑ Activation du fallback multi-agents...');
        
        const { criteres, newPreferences, newFilters } = agentCriteres(userMessage);
        const donneesResults = agentDonnees(userMessage, criteres, newFilters);
        const synthese = agentSynthese(criteres, donneesResults, userMessage);
        
        if (synthese.nombreResultats > 0) {
          const topRecommendation = synthese.recommandationsPrincipales[0];
          
          let response = `üéµ J'ai trouv√© des informations sur ${topRecommendation.nom} !\n\n`;
          
          if (topRecommendation.genre) response += `üé∂ Genre: ${topRecommendation.genre}\n`;
          if (topRecommendation.pays) response += `üìç Pays: ${topRecommendation.pays}\n`;
          if (topRecommendation.score) response += `‚≠ê Score de pertinence: ${topRecommendation.score}\n`;
          
          if (topRecommendation.raisonsRecommandation.length > 0) {
            response += `\n‚úÖ Pourquoi ce festival vous correspond:\n`;
            topRecommendation.raisonsRecommandation.forEach(raison => {
              response += `‚Ä¢ ${raison}\n`;
            });
          }
          
          if (topRecommendation.informationsCl√©s.length > 0) {
            response += `\nüìã Informations cl√©s:\n`;
            topRecommendation.informationsCl√©s.forEach(info => {
              response += `‚Ä¢ ${info}\n`;
            });
          }
          
          return {
            text: response,
            festivals: synthese.resultatsFiltr√©s.map(r => r.festival),
            synthese: synthese
          };
        } else {
          return {
            text: "D√©sol√©, je n'ai pas trouv√© de festivals correspondant √† vos crit√®res. Essayez d'√©largir votre recherche ! ü§ñ",
            festivals: festivalsData.slice(0, 3)
          };
        }
      } catch (fallbackError) {
        console.error('‚ùå Erreur dans le fallback multi-agents:', fallbackError);
        return {
          text: "D√©sol√©, je rencontre des difficult√©s techniques. Pouvez-vous r√©essayer votre question ? ü§ñ",
          festivals: null
        };
      }
    }
  };

  // R√©ponses intelligentes avec Gemini
  const getBotResponse = async (userMessage) => {
    const message = userMessage.toLowerCase();
    
    // V√©rifier si la question est sur un sujet musical autoris√©
    if (!isMusicalTopic(message)) {
      return {
        text: "D√©sol√©, je suis sp√©cialis√© uniquement dans les √©v√©nements musicaux, festivals, artistes et styles musicaux. Pouvez-vous me poser une question sur ces sujets ? üéµ",
        festivals: null
      };
    }
    
    // Si les donn√©es ne sont pas encore charg√©es
    if (festivalsData.length === 0) {
      return {
        text: "Je charge encore les donn√©es des festivals... Veuillez patienter un moment ! ‚è≥",
        festivals: null
      };
    }
    
    // Utiliser Gemini pour g√©n√©rer une r√©ponse intelligente
    try {
      const geminiResponse = await generateGeminiResponse(userMessage);
      return geminiResponse;
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de la r√©ponse:', error);
      return {
        text: "D√©sol√©, je rencontre des difficult√©s techniques. Pouvez-vous r√©essayer votre question ? ü§ñ",
        festivals: null
      };
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!inputValue.trim()) return;

    // Ajouter le message de l'utilisateur
    const userMessage = {
      id: Date.now(),
      text: inputValue,
      sender: 'user',
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    const currentInputValue = inputValue; // Sauvegarder la valeur
    setInputValue('');
    setIsTyping(true);

    try {
      // Appel asynchrone √† Gemini
      const botResponse = await getBotResponse(currentInputValue);
      
      // Simuler un effet de typing plus r√©aliste
      const typingDuration = Math.min(Math.max(botResponse.text.length * 20, 1500), 4000); // Entre 1.5s et 4s
      
      setTimeout(() => {
        const botMessage = {
          id: Date.now() + 1,
          text: botResponse.text,
          sender: 'bot',
          timestamp: new Date(),
          festivals: botResponse.festivals
        };

        setMessages(prev => [...prev, botMessage]);
        setIsTyping(false);
      }, typingDuration);
      
    } catch (error) {
      console.error('‚ùå Erreur lors de la g√©n√©ration de la r√©ponse:', error);
      
      setTimeout(() => {
        const errorMessage = {
          id: Date.now() + 1,
          text: "D√©sol√©, je rencontre des difficult√©s techniques. Pouvez-vous r√©essayer votre question ? ü§ñ",
          sender: 'bot',
          timestamp: new Date(),
          festivals: null
        };

        setMessages(prev => [...prev, errorMessage]);
        setIsTyping(false);
      }, 1500);
    }
  };

  const formatTime = (timestamp) => {
    return timestamp.toLocaleTimeString('fr-FR', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  const quickActions = [
    "A quel festival je peux aller avec un budget de 100 euros ?",
    "Donne-moi des festivals de House",
    "Est-ce qu'il y a un festival au Canada ?"
  ];

  const handleQuickAction = (action) => {
    setInputValue(action);
  };

  return (
    <div className="chatbot-page">
      {/* Header */}
      <div className="chatbot-header">
        <Link to="/" className="back-btn">
          <FaArrowLeft /> Retour
        </Link>
        <div className="bot-info">
          <div className="bot-avatar">
            <img src="/ChatGPT Image 18 juil. 2025, 03_01_37.png" alt="GroovBot" className="bot-avatar-img" />
          </div>
          <div className="bot-details">
            <h1>GroovBot</h1>
            <span className="bot-status">En ligne</span>
          </div>
        </div>
      </div>

      {/* Chat Container */}
      <div className="chat-container">
        <div className="messages-container">
          {messages.map((message) => (
            <div key={message.id} className={`message ${message.sender}`}>
              <div className="message-avatar">
                {message.sender === 'bot' ? (
                  <img src="/ChatGPT Image 18 juil. 2025, 03_01_37.png" alt="GroovBot" className="message-avatar-img" />
                ) : (
                  user && user.photo ? (
                    <img src={user.photo} alt="Photo de profil" className="message-avatar-img" />
                  ) : (
                    <FaUser />
                  )
                )}
              </div>
              <div className="message-content">
                <div className="message-bubble">
                  {message.text}
                </div>
                
                {/* Affichage des cartes de festivals */}
                {message.festivals && message.festivals.length > 0 && (
                  <div className="festivals-cards-container">
                    {message.festivals.map((festival, index) => (
                      <FestivalCard 
                        key={festival.id || index} 
                        festival={festival} 
                        compact={true}
                      />
                    ))}
                  </div>
                )}
                
                <div className="message-time">
                  {formatTime(message.timestamp)}
                </div>
              </div>
            </div>
          ))}
          
          {isTyping && (
            <div className="message bot">
              <div className="message-avatar">
                <img src="/ChatGPT Image 18 juil. 2025, 03_01_37.png" alt="GroovBot" className="message-avatar-img" />
              </div>
              <div className="message-content">
                <div className="message-bubble typing">
                  <div className="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* Actions rapides */}
        <div className="quick-actions">
          {quickActions.map((action, index) => (
            <button 
              key={index}
              className="quick-action-btn"
              onClick={() => handleQuickAction(action)}
            >
              {action}
            </button>
          ))}
        </div>

        {/* Input Form */}
        <form onSubmit={handleSubmit} className="message-form">
          <div className="input-container">
            <input
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              placeholder="Tapez votre message..."
              className="message-input"
              disabled={isTyping}
            />
            <button 
              type="submit" 
              className="send-btn"
              disabled={!inputValue.trim() || isTyping}
            >
              <FaPaperPlane />
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default Chatbot; 